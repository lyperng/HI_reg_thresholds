#using RColorBrewer
set3<-brewer.pal(9,'Set3')
deapal<-c('black','peru',set3[c(1, 3:9)]) #skipped 2 which was yellow--too hard to see
#indpal<-c(blues4[c(4,5,6)],'black')
resfinal$Index<-factor(resfinal$Index, levels=c('ZI','QI','EQI'), labels = c('Ecological\n Input','Social\n Output','Social-Ecological\n Productivity'))
resfinal$Indicator<-'Composite'
resfinal<-resfinal[,c('Year','Indicator','Value','Index')]
resfinal<-rbind(resfinal,inds)
resfinal$Indicator<-factor(resfinal$Indicator, levels=c('Composite', 'ENSO Anomaly','Secondary Consumers','Coral-Fleshy Algae Ratio','Chlorophyll a',
'Commercial Revenue','Revenue Diversity','Fishing Employment',
'Recreational Catch',"Tourism Employment"))
##productivity
temp4<-ggplot(resfinal, aes(x=Year, y=Value))+
facet_wrap(~Index) +
geom_line(aes(color=Indicator,linetype=Indicator), size = 0.9)+
scale_color_manual(values=deapal)+
scale_linetype_manual(values = c('solid',rep('longdash',10)))+
labs(x="Year", y="Index Score"
#, title = "Productivity Index Over Time"
)+
theme(plot.title=element_text(hjust=0.5, size = 21),
axis.text = element_text(size = 17),
#    axis.text.x = element_blank(),
#    axis.title.x = element_text(size = 17, vjust = -1), # vjust adjusts vertical space between plot & axis title
#     axis.title.x = element_blank(), # vjust adjusts vertical space between plot & axis title
axis.title = element_text(size = 21),
strip.background =element_rect(fill="gray94", colour = 'black', size =1), #change panel label color
strip.text = element_text(size = 22),
panel.grid.major = element_blank(), #delete major grid lines
panel.grid.minor = element_blank(), #delete minor grid lines
panel.background = element_rect(fill = "transparent",colour = 'black', size = 1),
#panel.spacing = unit(0.7, "lines"),
plot.background = element_rect(fill = "transparent",colour = NA),
plot.margin = unit(c(0.1,1,0.3,0.3), "cm"),
legend.position = 'top',
legend.background = element_rect(fill="transparent"),
legend.key = element_rect(fill = "transparent", colour = NA),
legend.key.size = unit(1, 'cm'),
legend.spacing.x = unit(0.1, 'cm'),
legend.text=element_text(size=12),
legend.title=element_blank(),
legend.margin = margin(b = -10)
) +
guides(color=guide_legend(nrow=2, byrow=TRUE, legend.box.just = "center")) + #so the legend is ordered by rows not columns
#4 columns so that legend can be separated by env then soc, will bring extra soc key to side in ppt
scale_x_continuous(breaks=seq(2005,2015,5)
#, labels = c('2000',rep('',4),'2005',rep('',4),'2010',rep('',4),'2015',rep('',2))
)
temp4
# read in ENSO df from ncei
ENSO0 <- read_csv('data/ENSO_noaa_ncei_ersst_v5.csv')
ENSO <- ENSO0[,c('YR','ANOM...10','NINO3.4')] # cut off month because we want yearly averages
ENSO_ann <- aggregate(. ~ YR, mean, data = ENSO)
names(ENSO_ann) <- c('Year', 'ENSOanom', 'SST3.4')
final<-na.omit(join(ENSO_ann,final1, type = 'inner'))
#final$SST <- final$SST3.4-mean(final$SST3.4)
#normalize to mean
for(i in 3:length(names(final))) {
#final[i]=final[i]-round_any(min(final[,i]),10, f = floor) #subtract min rounded down to nearest 10
final[i]=final[i]/mean(abs(final[,i])) #then normalize to mean
}
final$ENSOanom <- final$ENSOanom+1.35 # make everything positive
write_csv(final, 'data/DEA final_inds set.csv')
Y<-final[,c("CommRev.Mil", "RevDiv", "Catch.Millions","NES.Emp.Thousands","Tourism_Individuals.Thousands")]
#env inputs
X<-as.matrix(final[,c('Ratio','chlorA','SecConsumers','ENSOanom')])
YMED<-as.matrix(Y[1,]) #just using first value
XMED<-X[1,] #just using first value
#############################################################################################
YP<-as.matrix(Y)
XE<-X
########################################################################################
J=nrow(YP)
(M=ncol(YP))
(NXE=ncol(XE))
#Define A Matrix for GLPK and LPSolve.
YX=cbind(YP,XE)
A=matrix(0,M+NXE+1,J+1)
#Next, Transform YX matrix and copy to A.
A[1:(M+NXE),1:J]=t(YX)
A[(M+NXE+1),1:J]=1.0
######################################################################
#First Program is for Numerator of Output Quantity Index
#We use GLPK package for LP model
#########################################################################
obj=c(rep(0,J),1)
(dir=c(rep('>=',M),rep('<=',NXE), '<='))
max<-TRUE
objvals1=0
status1=0
for(j in 1:J){
A[1:M,J+1]=-A[1:M,j]                               #last column of A Matrix set equal to
#observation j output
rhs=c(rep(0,M),XMED,1)                #rhs is being set to 0 for outputs,
#Median Value of environmental input
sol<- Rglpk_solve_LP(obj, A, dir, rhs, max=max)    #Define model and use RGLPK to solve
if(j%%100==0|j==J)  print(paste('on dmu',j,'of',J))#shows when 100 observations solved
objvals1[j]=round(1/sol$optimum,4)                 #objective function value
#returned by sol$optimum
status1[j]=sol$status                              #For Error Checking.
#If Model solves, all values of status1 should equal zero
}
#####################################################################################
#FP #2 Reference observation is 2005
#Denominator of Output Quantity Index - based on optimization using one reference firm
#Just using observation #1 for this example
######################################################################################
#Define A Matrix for GLPK.
A=matrix(0,M+NXE+1,J+1)
#Next, Transform YX matrix and copy to A.
A[1:(M+NXE),1:J]=t(YX)
A[(M+NXE+1),1:J]=1.0
obj=c(rep(0,J),1)
(dir=c(rep('>=',M),rep('<=',NXE), '<='))
max<-TRUE
status2=0
objvals2=0
for(j in 1:J){
A[1:M,J+1]=-YMED        #Median Y value for outputs
rhs=c(rep(0,M),XMED,1)  #Median X value for inputs
sol<- Rglpk_solve_LP(obj, A, dir, rhs, max=max)
if(j%%100==0|j==J)  print(paste('on dmu',j,'of',J))
objvals2[j]=round(1/sol$optimum,5)
status2[j]=sol$status
}
QI=round(objvals1/objvals2, 5)  #Output Index
########################################################################################
##################################################################################
##Continue here with next two LP programs. These are for the Environmental Quantity
#Index. First program is for the Numerator
##################################################################################
#Define A Matrix for GLPK.
A=matrix(0,M+NXE+1,J+1)
#Next, Transform YX matrix and copy to A.
A[1:(M+NXE),1:J]=t(YX)
A[(M+NXE+1),1:J]=1.0
obj=c(rep(0,J),1)
(dir=c(rep('>=',M),rep('<=',NXE), '<='))
max<-FALSE                                           #FALSE means minimization Model
status3=0
objvals3=0
for(j in 1:J){
A[(M+1):(M+NXE),J+1]=-A[(M+1):(M+NXE),j]            #last column of A matrix set equal
#to Environmental variables
rhs=c(as.matrix(YMED),rep(0,NXE),1)                 #Constraint structure is different
#than model #1
sol<- Rglpk_solve_LP(obj, A, dir, rhs, max=max)
if(j%%100==0|j==J)  print(paste('on dmu',j,'of',J))
objvals3[j]=round(1/sol$optimum,4)
status3[j]=sol$status
}
###################################################################################
#Final LP program for denominator of environmental quality variable
###################################################################################
#Define A Matrix for GLPK and LPSolve.
A=matrix(0,M+NXE+1,J+1)
#Next, Transform YX matrix and copy to A.
A[1:(M+NXE),1:J]=t(YX)
A[(M+NXE+1),1:J]=1.0
obj=c(rep(0,J),1)
(dir=c(rep('>=',M),rep('<=',NXE), '<='))
max<-FALSE
status4=0
objvals4=0
for(j in 1:J){
A[(M+1):(M+NXE),J+1]=-XMED
rhs=c(YMED,rep(0,NXE),1)
sol<- Rglpk_solve_LP(obj, A, dir, rhs, max=max)
if(j%%100==0|j==J)  print(paste('on dmu',j,'of',J))
objvals4[j]=round(1/sol$optimum,4)
status4[j]=sol$status
}
ZI=objvals3/objvals4
EQI=QI/ZI          #Final Index Number
#save as different resfinal df depending which variables were included
resfinal<-as.data.table(cbind(final[1],QI,ZI,EQI))
resfinal<-gather(resfinal,'Index','Value',2:4)
#gather normalized indicators to long form to plot indiv line plots
final<-read.csv('data/DEA final_inds set.csv')
soc<-final[,c('Year',"CommRev.Mil", "RevDiv", "Catch.Millions","NES.Emp.Thousands","Tourism_Individuals.Thousands")]
colnames(soc)<-c('Year','Commercial Revenue','Revenue Diversity','Recreational Catch','Fishing Employment','Tourism Employment')
soc<-gather(soc, 'Indicator','Value',2:6)
soc$Index<-'Social\n Output'
env<-final[,c('Year', "Ratio",'chlorA','SecConsumers', 'ENSOanom')]
colnames(env)<-c('Year', "Coral-Fleshy Algae Ratio",'Chlorophyll a', 'Secondary Consumers', 'ENSO Anomaly')
env<-gather(env, 'Indicator','Value',2:5)
env$Index<-'Ecological\n Input'
inds<-rbind(soc,env)
#using RColorBrewer
set3<-brewer.pal(9,'Set3')
deapal<-c('black','peru',set3[c(1, 3:9)]) #skipped 2 which was yellow--too hard to see
#indpal<-c(blues4[c(4,5,6)],'black')
resfinal$Index<-factor(resfinal$Index, levels=c('ZI','QI','EQI'), labels = c('Ecological\n Input','Social\n Output','Social-Ecological\n Productivity'))
resfinal$Indicator<-'Composite'
resfinal<-resfinal[,c('Year','Indicator','Value','Index')]
resfinal<-rbind(resfinal,inds)
resfinal$Indicator<-factor(resfinal$Indicator, levels=c('Composite', 'ENSO Anomaly','Secondary Consumers','Coral-Fleshy Algae Ratio','Chlorophyll a',
'Commercial Revenue','Revenue Diversity','Fishing Employment',
'Recreational Catch',"Tourism Employment"))
##productivity
temp4<-ggplot(resfinal, aes(x=Year, y=Value))+
facet_wrap(~Index) +
geom_line(aes(color=Indicator,linetype=Indicator), size = 0.9)+
scale_color_manual(values=deapal)+
scale_linetype_manual(values = c('solid',rep('longdash',10)))+
labs(x="Year", y="Index Score"
#, title = "Productivity Index Over Time"
)+
theme(plot.title=element_text(hjust=0.5, size = 21),
axis.text = element_text(size = 17),
#    axis.text.x = element_blank(),
#    axis.title.x = element_text(size = 17, vjust = -1), # vjust adjusts vertical space between plot & axis title
#     axis.title.x = element_blank(), # vjust adjusts vertical space between plot & axis title
axis.title = element_text(size = 21),
strip.background =element_rect(fill="gray94", colour = 'black', size =1), #change panel label color
strip.text = element_text(size = 22),
panel.grid.major = element_blank(), #delete major grid lines
panel.grid.minor = element_blank(), #delete minor grid lines
panel.background = element_rect(fill = "transparent",colour = 'black', size = 1),
#panel.spacing = unit(0.7, "lines"),
plot.background = element_rect(fill = "transparent",colour = NA),
plot.margin = unit(c(0.1,1,0.3,0.3), "cm"),
legend.position = 'top',
legend.background = element_rect(fill="transparent"),
legend.key = element_rect(fill = "transparent", colour = NA),
legend.key.size = unit(1, 'cm'),
legend.spacing.x = unit(0.1, 'cm'),
legend.text=element_text(size=12),
legend.title=element_blank(),
legend.margin = margin(b = -10)
) +
guides(color=guide_legend(nrow=2, byrow=TRUE, legend.box.just = "center")) + #so the legend is ordered by rows not columns
#4 columns so that legend can be separated by env then soc, will bring extra soc key to side in ppt
scale_x_continuous(breaks=seq(2005,2015,5)
#, labels = c('2000',rep('',4),'2005',rep('',4),'2010',rep('',4),'2015',rep('',2))
)
temp4
ggsave('figures/DEA/Facetted Indices Over Time_ENSO.png',
width =  12, height = 4.4, units = 'in', #w & h in inches
dpi = 300, bg = 'transparent')
##productivity
temp4<-ggplot(resfinal, aes(x=Year, y=Value))+
facet_wrap(~Index) +
geom_line(aes(color=Indicator,linetype=Indicator), size = 0.6)+
scale_color_manual(values=deapal)+
scale_linetype_manual(values = c('solid',rep('longdash',10)))+
labs(x="Year", y="Index Score"
#, title = "Productivity Index Over Time"
)+
theme(plot.title=element_text(hjust=0.5, size = 21),
axis.text = element_text(size = 17),
#    axis.text.x = element_blank(),
#    axis.title.x = element_text(size = 17, vjust = -1), # vjust adjusts vertical space between plot & axis title
#     axis.title.x = element_blank(), # vjust adjusts vertical space between plot & axis title
axis.title = element_text(size = 21),
strip.background =element_rect(fill="gray94", colour = 'black', size =1), #change panel label color
strip.text = element_text(size = 22),
panel.grid.major = element_blank(), #delete major grid lines
panel.grid.minor = element_blank(), #delete minor grid lines
panel.background = element_rect(fill = "transparent",colour = 'black', size = 1),
#panel.spacing = unit(0.7, "lines"),
plot.background = element_rect(fill = "transparent",colour = NA),
plot.margin = unit(c(0.1,1,0.3,0.3), "cm"),
legend.position = 'top',
legend.background = element_rect(fill="transparent"),
legend.key = element_rect(fill = "transparent", colour = NA),
legend.key.size = unit(1, 'cm'),
legend.spacing.x = unit(0.1, 'cm'),
legend.text=element_text(size=12),
legend.title=element_blank(),
legend.margin = margin(b = -10)
) +
guides(color=guide_legend(nrow=2, byrow=TRUE, legend.box.just = "center")) + #so the legend is ordered by rows not columns
#4 columns so that legend can be separated by env then soc, will bring extra soc key to side in ppt
scale_x_continuous(breaks=seq(2005,2015,5)
#, labels = c('2000',rep('',4),'2005',rep('',4),'2010',rep('',4),'2015',rep('',2))
)
ggsave('figures/DEA/Facetted Indices Over Time_ENSOleg.png',
width =  12, height = 4.4, units = 'in', #w & h in inches
dpi = 300, bg = 'transparent')
ENSO0 <- read_csv('data/SOI_noaa_ncei_ersst_v5.csv')
ENSO <- ENSO0[,c('YR','ANOM...10','NINO3.4')] # cut off month because we want yearly averages
ENSO_ann <- aggregate(. ~ YR, mean, data = ENSO)
ENSO0 <- read_csv('data/SOI_noaa_ncei_ersst_v5.csv')
ENSO0 <- read_csv('data/SOI_noaa_ncei_ersst_v5.csv')
ENSO0 <- read_csv('data/SOI_noaa_ncei_ersst_v5.csv')
ENSO <- ENSO0[,c('YR','ANOM...10','NINO3.4')] # cut off month because we want yearly averages
View(ENSO)
ENSO0 <- read_csv('data/SOI_noaa_ncei_ersst_v5.csv')
View(ENSO)
View(ENSO0)
ENSO0$SOI <- mean(ENSO0[,c(2:13)])
ENSO0[,c(2:13)]
ENSO0 <- read_csv('data/SOI_noaa_ncei_ersst_v5.csv')
ENSO0$SOI <- mean(ENSO0[,c(2:13)])
ENSO0$SOI <- rowMeans(ENSO0[,c(2:13)])
plot(ENSO0$YEAR, ENSO0$SOI)
plot(ENSO0$YEAR[25:42], ENSO0$SOI[25:42])
plot(ENSO0$YEAR[25:42], (ENSO0$SOI[25:42]*-1))
###################### plot by County with mean & se ######################
pd <- position_dodge(0.2) # move them .02 to the left and right
countypal4<-c('#e78ac3','#8da0cb','#66c2a5','#fc8d62')
#reorder by counties in geographic order using dplyr
counordered <- c("Kaua‘i County", "Honolulu County", "Maui County", 'Hawai‘i County')
df_summary<-read.csv("outputs/CSVI over time by County_se_long.csv")
df_summary$Indicator <- factor(df_summary$Indicator,
levels = c("Pounds.Thousands1000", "Dollars.Thousands1000", "Dealers1000", "CommPermits1000", "RecFshTrps1000",
'PopDensity.Thousands',"WaterArea"),
labels = c("Landings\n(1000 lbs)", "Revenue\n(1000 Dollars)", "Dealers",
"Commercial\nPermits", "Recreational\nTrips",
'Population\nper sq km',"Water Cover\n(Area) "))
df_summary$County<-factor(df_summary$County, levels = counordered)
ggplot(df_summary, aes(Year, val.mean)) +
facet_wrap(~Indicator,scales = "free_y",ncol=5,
strip.position = 'left') +
# geom_errorbar(aes(ymin=val.mean-val.se, ymax=val.mean+val.se,color = County), width=.1, position=pd) +
#commented out variation for visual clarity
geom_line(aes(color = County), size = 1) + #plots lines for each community color coded by county
scale_color_manual(labels=counordered,
values =countypal4) +
geom_point(aes(color = County, shape = County), size = 2.5) +
scale_shape_manual(labels=counordered,
values =c(21:24)) +
scale_x_continuous(breaks=seq(2010,2018,4)) + #so that a tick appears every year--default ticks only where breaks are assigned
theme_bw() +
theme(plot.title = element_text(size = 17, hjust =0.5),
axis.title.x = element_text(size = 16), # vjust adjusts vertical space between plot & axis title
axis.title.y = element_blank(),
axis.text = element_text(size = 10),
strip.text = element_text(size = 14, vjust = -0.14),
legend.text=element_text(size=17),
legend.title=element_blank(),
legend.key.size = unit(1, 'cm'),
legend.spacing.y = unit(0.6,'cm'),
legend.position = c(0.71,0.24),
legend.background = element_rect(fill="transparent"),
legend.margin = margin(3,12,9,10),
panel.grid.major = element_blank(), #delete major grid lines
panel.grid.minor = element_blank(), #delete minor grid lines
panel.spacing.x = unit(-0.2, "lines"),
#    panel.spacing.y = unit(2, "lines"),
strip.background = element_blank(),
strip.placement = "outside") +
guides(color=guide_legend(nrow=2),byrow=T) + #so the legend is ordered by rows not columns
ggtitle('Indicator Values per Thousand Population')
#Text: "Productivity and Efficiency Analysis", by Chris O'Donnell
#Also calculate Quantity Indices frm page 83, "New Directions: Efficiency and
#Productivity" by Rolf Fare and Shawna Grosskopf
#Author: John Walden, NMFS, NEFSC
#Edited for 1) HI CSVI (spatial) Data and 2) time series DEA by Lansing Perng, NOAA PIFSC, UHM
#February 27, 2021
#############################################################################
#First Clear any previous data stored in memory, and require lpSolveAPI, Rglpk,
#lpSolveApI and readr
##############################################################################
rm(list=ls())
PKG <- c("lpSolveAPI", "readr", "Rglpk", "Benchmarking","ggplot2", "reshape2", 'psych', 'tigris',
"data.table", "plyr", "dplyr","Compind", "tidyr","doBy","stringr", "Rmisc", "RColorBrewer")
for (p in PKG) {
if(!require(p,character.only = TRUE)) {  # if the package is not installed (require returns FALSE)
install.packages(p)                    # then install it
require(p,character.only = TRUE)}      # otherwise, load it (require loads like library()), and also returns a logical
}
###################### plot by County with mean & se ######################
pd <- position_dodge(0.2) # move them .02 to the left and right
countypal4<-c('#e78ac3','#8da0cb','#66c2a5','#fc8d62')
#reorder by counties in geographic order using dplyr
counordered <- c("Kaua‘i County", "Honolulu County", "Maui County", 'Hawai‘i County')
df_summary<-read.csv("outputs/CSVI over time by County_se_long.csv")
df_summary$Indicator <- factor(df_summary$Indicator,
levels = c("Pounds.Thousands1000", "Dollars.Thousands1000", "Dealers1000", "CommPermits1000", "RecFshTrps1000",
'PopDensity.Thousands',"WaterArea"),
labels = c("Landings\n(1000 lbs)", "Revenue\n(1000 Dollars)", "Dealers",
"Commercial\nPermits", "Recreational\nTrips",
'Population\nper sq km',"Water Cover\n(Area) "))
df_summary$County<-factor(df_summary$County, levels = counordered)
ggplot(df_summary, aes(Year, val.mean)) +
facet_wrap(~Indicator,scales = "free_y",ncol=5,
strip.position = 'left') +
# geom_errorbar(aes(ymin=val.mean-val.se, ymax=val.mean+val.se,color = County), width=.1, position=pd) +
#commented out variation for visual clarity
geom_line(aes(color = County), size = 1) + #plots lines for each community color coded by county
scale_color_manual(labels=counordered,
values =countypal4) +
geom_point(aes(color = County, shape = County), size = 2.5) +
scale_shape_manual(labels=counordered,
values =c(21:24)) +
scale_x_continuous(breaks=seq(2010,2018,4)) + #so that a tick appears every year--default ticks only where breaks are assigned
theme_bw() +
theme(plot.title = element_text(size = 17, hjust =0.5),
axis.title.x = element_text(size = 16), # vjust adjusts vertical space between plot & axis title
axis.title.y = element_blank(),
axis.text = element_text(size = 10),
strip.text = element_text(size = 14, vjust = -0.14),
legend.text=element_text(size=17),
legend.title=element_blank(),
legend.key.size = unit(1, 'cm'),
legend.spacing.y = unit(0.6,'cm'),
legend.position = c(0.71,0.24),
legend.background = element_rect(fill="transparent"),
legend.margin = margin(3,12,9,10),
panel.grid.major = element_blank(), #delete major grid lines
panel.grid.minor = element_blank(), #delete minor grid lines
panel.spacing.x = unit(-0.2, "lines"),
#    panel.spacing.y = unit(2, "lines"),
strip.background = element_blank(),
strip.placement = "outside") +
guides(color=guide_legend(nrow=2),byrow=T) + #so the legend is ordered by rows not columns
ggtitle('Indicator Values per Thousand Population')
ggplot(df_summary, aes(Year, val.mean)) +
facet_wrap(~Indicator,scales = "free_y",ncol=5,
strip.position = 'left') +
# geom_errorbar(aes(ymin=val.mean-val.se, ymax=val.mean+val.se,color = County), width=.1, position=pd) +
#commented out variation for visual clarity
geom_line(aes(color = County), size = 1) + #plots lines for each community color coded by county
scale_color_manual(labels=counordered,
values =countypal4) +
geom_point(aes(color = County, shape = County), size = 2.5) +
scale_shape_manual(labels=counordered,
values =c(21:24)) +
scale_x_continuous(breaks=seq(2010,2018,4)) + #so that a tick appears every year--default ticks only where breaks are assigned
theme_bw() +
theme(plot.title = element_text(size = 17, hjust =0.5),
axis.title.x = element_text(size = 16), # vjust adjusts vertical space between plot & axis title
axis.title.y = element_blank(),
axis.text = element_text(size = 10),
strip.text = element_text(size = 13.5, vjust = -0.14),
legend.text=element_text(size=17),
legend.title=element_blank(),
legend.key.size = unit(1, 'cm'),
legend.spacing.y = unit(0.6,'cm'),
legend.position = c(0.71,0.24),
legend.background = element_rect(fill="transparent"),
legend.margin = margin(3,12,9,10),
panel.grid.major = element_blank(), #delete major grid lines
panel.grid.minor = element_blank(), #delete minor grid lines
panel.spacing.x = unit(-0.2, "lines"),
#    panel.spacing.y = unit(2, "lines"),
strip.background = element_blank(),
strip.placement = "outside") +
guides(color=guide_legend(nrow=2),byrow=T) + #so the legend is ordered by rows not columns
ggtitle('Indicator Values per Thousand Population')
ggplot(df_summary, aes(Year, val.mean)) +
facet_wrap(~Indicator,scales = "free_y",ncol=5,
strip.position = 'left') +
# geom_errorbar(aes(ymin=val.mean-val.se, ymax=val.mean+val.se,color = County), width=.1, position=pd) +
#commented out variation for visual clarity
geom_line(aes(color = County), size = 1) + #plots lines for each community color coded by county
scale_color_manual(labels=counordered,
values =countypal4) +
geom_point(aes(color = County, shape = County), size = 2.5) +
scale_shape_manual(labels=counordered,
values =c(21:24)) +
scale_x_continuous(breaks=seq(2010,2018,4)) + #so that a tick appears every year--default ticks only where breaks are assigned
theme_bw() +
theme(plot.title = element_text(size = 17, hjust =0.5),
axis.title.x = element_text(size = 16), # vjust adjusts vertical space between plot & axis title
axis.title.y = element_blank(),
axis.text = element_text(size = 10),
strip.text = element_text(size = 13.2, vjust = -0.14),
legend.text=element_text(size=17),
legend.title=element_blank(),
legend.key.size = unit(1, 'cm'),
legend.spacing.y = unit(0.6,'cm'),
legend.position = c(0.71,0.24),
legend.background = element_rect(fill="transparent"),
legend.margin = margin(3,12,9,10),
panel.grid.major = element_blank(), #delete major grid lines
panel.grid.minor = element_blank(), #delete minor grid lines
panel.spacing.x = unit(-0.2, "lines"),
#    panel.spacing.y = unit(2, "lines"),
strip.background = element_blank(),
strip.placement = "outside") +
guides(color=guide_legend(nrow=2),byrow=T) + #so the legend is ordered by rows not columns
ggtitle('Indicator Values per Thousand Population')
ggplot(df_summary, aes(Year, val.mean)) +
facet_wrap(~Indicator,scales = "free_y",ncol=5,
strip.position = 'left') +
# geom_errorbar(aes(ymin=val.mean-val.se, ymax=val.mean+val.se,color = County), width=.1, position=pd) +
#commented out variation for visual clarity
geom_line(aes(color = County), size = 1) + #plots lines for each community color coded by county
scale_color_manual(labels=counordered,
values =countypal4) +
geom_point(aes(color = County, shape = County), size = 2.5) +
scale_shape_manual(labels=counordered,
values =c(21:24)) +
scale_x_continuous(breaks=seq(2010,2018,4)) + #so that a tick appears every year--default ticks only where breaks are assigned
theme_bw() +
theme(plot.title = element_text(size = 17, hjust =0.5),
axis.title.x = element_text(size = 16), # vjust adjusts vertical space between plot & axis title
axis.title.y = element_blank(),
axis.text = element_text(size = 10),
strip.text = element_text(size = 13.1, vjust = -0.14),
legend.text=element_text(size=17),
legend.title=element_blank(),
legend.key.size = unit(1, 'cm'),
legend.spacing.y = unit(0.6,'cm'),
legend.position = c(0.71,0.24),
legend.background = element_rect(fill="transparent"),
legend.margin = margin(3,12,9,10),
panel.grid.major = element_blank(), #delete major grid lines
panel.grid.minor = element_blank(), #delete minor grid lines
panel.spacing.x = unit(-0.2, "lines"),
#    panel.spacing.y = unit(2, "lines"),
strip.background = element_blank(),
strip.placement = "outside") +
guides(color=guide_legend(nrow=2),byrow=T) + #so the legend is ordered by rows not columns
ggtitle('Indicator Values per Thousand Population')
#plot with no error
ggsave(paste('figures/DEA/Indicators over time by County_means.png',sep=''),
width =  11.5, height = 3.7, units = 'in', #w & h in inches
dpi = 300, bg = 'transparent')
